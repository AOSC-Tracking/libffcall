Building a Linux/arm guest machine using QEMU
=============================================

These guest machines implements the arm-linux and armhf-linux
target platforms.

References:
  - QEMU wiki page:
    http://wiki.qemu.org/Documentation/Platforms/ARM
  - TorbjÃ¶rn Granlund's recipe:
    https://gmplib.org/~tege/qemu.html#armel-debian
    https://gmplib.org/~tege/qemu.html#armhf-debian


Building the arm-linux machine (armv5 CPU, Debian arch: armel)
==============================================================

Installation instructions
-------------------------

Use qemu-2.8.0
$ PATH=/arch/x86_64-linux-gnu/gnu-inst-qemu/2.8.0/bin:$PATH

Create empty disk:
$ qemu-img create -f raw debian86.img 10G

Pull kernel and initrd out of the installation CD:
$ sudo mount -r -t iso9660 -o loop /os-install-media/Linux/Debian/debian-8.6.0-armel-CD-1.iso /mnt
$ mkdir boot-for-install
$ cp -p /mnt/install/versatile/netboot/* boot-for-install/
$ sudo umount /mnt

Run installer:
$ common_args="-M versatilepb -m 256 -drive file=debian86.img,format=raw,index=0 -display gtk"
$ qemu-system-arm $common_args -kernel boot-for-install/vmlinuz-3.16.0-4-versatile -initrd boot-for-install/initrd.gz

You get the message:
"No boot loader installed
You will need to boot manually with the /boot/vmlinuz kernel on partition /dev/sda1
and root=/dev/sda1 passed as kernel argument."

Once installation finished:
$ sudo kpartx -av debian86.img
$ sudo mount -r -t ext4 /dev/mapper/loop0p1 /mnt
$ (cd /mnt && tar cf - boot) | tar xvf -
$ sudo umount /mnt
$ sudo kpartx -dv debian86.img

Booting the installed disk
--------------------------

$ qemu-system-arm $common_args -kernel boot/vmlinuz -initrd boot/initrd.img -append "root=/dev/sda1"

Post-installation instructions
------------------------------

Networking is not working!
It's a DNS problem. /etc/resolv.conf contains: "nameserver fec0::3"
Replace it with: "nameserver 8.8.8.8"
This works temporarily.
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844592
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844566
Workaround: Disable IPv6 through
# echo 'net.ipv6.conf.all.disable_ipv6 = 1' > /etc/sysctl.d/01-disable-ipv6.conf
See https://www.thomas-krenn.com/de/wiki/IPv6_deaktivieren

$ sudo bash
# apt-get update
# apt-get install make
# apt-get install gcc binutils-doc glibc-doc libc-dbg gdb
# apt-get install vim-nox vim-doc
# apt-get install emacs-nox emacs24-el

Script that runs the guest VM
-----------------------------

#!/bin/sh
PATH=$HOME/inst-qemu/2.8.1/bin:$PATH
cd $HOME/vms/qemu/armel
machine_args="-M versatilepb -m 256"
disk_args="-drive file=debian86.img,format=raw,index=0"
net_args="" # equivalent to "-netdev user -netdev nic"
if test "$1" = "-nographic"; then
  display_args="-nographic"
else
  display_args="-display gtk -monitor stdio"
fi
common_args="$machine_args $disk_args $net_args $display_args"
exec qemu-system-arm $common_args -kernel boot/vmlinuz -initrd boot/initrd.img -append "root=/dev/sda1"

Usage notes
-----------


Building the armhf-linux machine (armv7 CPU with hardware floats, Debian arch: armhf)
=====================================================================================

Installation instructions
-------------------------

Use qemu-2.8.0
$ PATH=/arch/x86_64-linux-gnu/gnu-inst-qemu/2.8.0/bin:$PATH

Create empty disk:
$ qemu-img create -f raw debian86.img 10G

Pull kernel and initrd out of the installation CD:
$ sudo mount -r -t iso9660 -o loop /os-install-media/Linux/Debian/debian-8.6.0-armhf-CD-1.iso /mnt
$ mkdir boot-for-install
$ cp -p /mnt/install/netboot/* boot-for-install/
$ sudo umount /mnt


Run installer:
Which CPU? Cf.
  https://www.debian.org/releases/stable/armhf/ch02s01.html.en#idp42797344
  https://en.wikipedia.org/wiki/Comparison_of_ARMv7-A_cores
Which network hardware?
  -netdev user,id=net0 -device virtio-net-device,netdev=net0,mac=52:54:00:71:ce:14
Which disk hardware?
  -drive file=debian86.img,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0
$ common_args="-M virt -cpu cortex-a15 -m 256 -drive file=debian86.img,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 -monitor stdio -netdev user,id=net0 -device virtio-net-device,netdev=net0,mac=52:54:00:71:ce:14 -display gtk"
$ qemu-system-arm $common_args -kernel boot-for-install/vmlinuz -initrd boot-for-install/initrd.gz

You get the message:
"No boot loader installed
You will need to boot manually with the /boot/vmlinuz kernel on partition /dev/sda1
and root=/dev/sda1 passed as kernel argument."

Once installation finished:
$ sudo kpartx -av debian86.img
$ sudo mount -r -t ext4 /dev/mapper/loop0p1 /mnt
$ mkdir boot
$ (cd /mnt && tar cf - --exclude=lost+found .) | (cd boot && tar xvf -)
$ sudo umount /mnt
$ sudo kpartx -dv debian86.img

Booting the installed disk
--------------------------

$ qemu-system-arm $common_args -kernel boot/vmlinuz -initrd boot/initrd.img -append "root=/dev/vda2"

Post-installation instructions
------------------------------

Networking is not working!
It's a DNS problem. /etc/resolv.conf contains: "nameserver fec0::3"
Replace it with: "nameserver 8.8.8.8"
This works temporarily.
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844592
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844566
Workaround: Disable IPv6 through
# echo 'net.ipv6.conf.all.disable_ipv6 = 1' > /etc/sysctl.d/01-disable-ipv6.conf
See https://www.thomas-krenn.com/de/wiki/IPv6_deaktivieren

$ sudo bash
# apt-get update
# apt-get install make
# apt-get install gcc binutils-doc glibc-doc libc-dbg gdb
# apt-get install vim-nox vim-doc
# apt-get install emacs-nox emacs24-el

Script that runs the guest VM
-----------------------------

#!/bin/sh
PATH=$HOME/inst-qemu/2.8.1/bin:$PATH
cd $HOME/vms/qemu/armelhf
machine_args="-M virt -cpu cortex-a15 -m 256"
disk_args="-drive file=debian86.img,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0"
net_args="-netdev user,id=net0 -device virtio-net-device,netdev=net0"
if test "$1" = "-nographic"; then
  display_args="-nographic"
else
  display_args="-display gtk -monitor stdio"
fi
common_args="$machine_args $disk_args $net_args $display_args"
exec qemu-system-arm $common_args -kernel boot/vmlinuz -initrd boot/initrd.img -append "root=/dev/vda2"

Usage notes
-----------
