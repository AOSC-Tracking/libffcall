Call-used general-purpose/integer registers, not interfering with arg registers:

* To find the call-used registers:
  grep CALL_USED in the machine description.
* Remove from this list the general-purpose/integer argument registers
  and the struct return address register.
The remaining registers are available for use in trampolines.

             Call-used registers         Argument registers    Struct return     Available
i386         eax,edx,ecx                 -                     -                 eax,edx,ecx
m68k         d0,d1,a0,a1                 -                     -                 d0,d1,a0,a1
mips         r2-r15,r24                  r4-r7                 -                 r2-r3,r8-r15,r24
mips{n32,64} r2-r15,r24                  r4-r11                -                 r2-r3,r12-r15,r24
sparc        o0-o5,g1-g4                 o0-o5                 -                 g1-g4
sparc64      o0-o5,g1-g5                 o0-o5                 -                 g1-g5
alpha        $0-$8,$16-$25,$28           $16-$21               -                 $0-$8,$22-$25,$28
hppa         19-26,28-29                 23-26                 28                19-22,29
arm          r0-r3,r12,r14               r0-r3                 -                 r12=ip[,r14=lr]
aarch64      r0-r18                      r0-r7                 r8                r9-r18
powerpc      0,3-12                      3-10                  -                 0,11-12
powerpc64    0,3-12                      3-10                  -                 0,11-12
ia64         r2-r3,r8-r11,r14-r31        r32-r39               r8                r14-r31,r9-r11,r2-r3
x86_64       rax,rdx,rcx,rsi,rdi,r8-r11  rdi,rsi,rdx,rcx,r8,r9 -                 rax,r10,r11
s390         r0-r5                       r2-r6                 -                 r0-r1

To find which among these are the most frequently used ones,
compile the small program:
extern void* volatile x;
extern void* volatile y;
int foo (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{ void* a = x; void* b = y; y = a; x = b;
  return a0+a1+a2+a3+a4+a5+a6+a7;
}

Among these, we can use the lexical closure reg, because __vacall_r has no
lexical closure (more precisely, we are building a lexical closure for it).

grep STATIC_CHAIN_REGNUM and TRAMPOLINE_TEMPLATE in the machine description.

             Machine description         first two (a,b)     Lexical closure reg
i386         eax,edx,ecx                 eax,edx                 ecx
m68k         d0,d1,a0,a1                 d0,d1                   a0 (a1 in NetBSD)
mips         r2-r3,r8-r15,r24            $2=v0,$3=v1,$8=t0       $2
mips{n32,64} r2-r3,r12-r15,r24           ?                       $2
sparc        g1-g4                       g1-g3                   g2
sparc64      g1-g5                       g1-g3                   g5
alpha        $0-$8,$22-$25,$28           $2,$1                   $1
hppa         19-22,29                    r19,r20,r21,r22         r29
arm          r12=ip[,r14=lr]             r0,r1,r3,r2             r12
aarch64      r9-r18                      ?                       r18
powerpc      0,11-12                     0,11,12                 11 (13 in NetBSD)
powerpc64    0,11-12                     0,11                    11
ia64         r14-r31,r9-r11,r2-r3        r8,r14,r15...r19        r15
x86_64       rax,r10,r11                 rax,r10                 r10
s390         r0-r1                       r12,r0                  r0
