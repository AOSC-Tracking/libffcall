# This is the developer's -*-Makefile-*-, not the user's makefile.
# Do not use it unless you know exactly what you do!

THISFILE = Makefile.devel
LN = ln -s
RM = rm -f

# ============ Rules that require cross-compilation tools ============

HOST = i486-linux
CPU = i386
GCC = gcc
GCCFLAGS = -O2 -fno-omit-frame-pointer -fPIC
SED = sed
CROSS_TOOL = cross

precompiled : \
  avcall-i386-macro.S \
  avcall-m68k.mit.S avcall-m68k.motorola.S \
  avcall-mipseb-macro.S avcall-mipsel-macro.S avcall-mipsn32eb-macro.S avcall-mipsn32el-macro.S avcall-mips64eb-macro.S avcall-mips64el-macro.S \
  avcall-sparc-macro.S avcall-sparc64-macro.S
# Old rules
# avcall-alpha.s avcall-hppa.s avcall-arm-macro.S avcall-armel-macro.S avcall-powerpc-aix.s avcall-powerpc-sysv4.s avcall-powerpc-macos.s avcall-powerpc64.s avcall-ia64.s avcall-x86_64-macro.S


avcall-i386-linux.s : avcall-i386.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) i386-linux gcc -V 3.1 $(GCCFLAGS) -D__i386__ -fno-omit-frame-pointer -S avcall-i386.c -o avcall-i386-linux.s

avcall-i386-macro.S : avcall-i386-linux.s ../common/asm-i386.sh $(THISFILE)
	(echo '#include "asm-i386.h"' ; sed -e '/\.align.*,0x90$$/d' < avcall-i386-linux.s | ../common/asm-i386.sh) > avcall-i386-macro.S


avcall-m68k-linux.s : avcall-m68k.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) m68k-linux gcc -V 3.1 $(GCCFLAGS) -D__m68k__ -S avcall-m68k.c -o avcall-m68k-linux.s

avcall-m68k-sun.s : avcall-m68k.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) m68k-sun gcc -V 3.1 $(GCCFLAGS) -D__m68k__ -S avcall-m68k.c -o avcall-m68k-sun.s

avcall-m68k.mit.S : avcall-m68k-sun.s ../common/asm-m68k.sh $(THISFILE)
	(echo '#include "asm-m68k.h"' ; ../common/asm-m68k.sh mit < avcall-m68k-sun.s) > avcall-m68k.mit.S

avcall-m68k.motorola.S : avcall-m68k-linux.s ../common/asm-m68k.sh $(THISFILE)
	(echo '#include "asm-m68k.h"' ; ../common/asm-m68k.sh motorola < avcall-m68k-linux.s) > avcall-m68k.motorola.S


avcall-mipseb-linux.s : avcall-mips.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=32 -meb $(GCCFLAGS) -D__mips__ -S avcall-mips.c -o avcall-mipseb-linux.s

avcall-mipseb-macro.S : avcall-mipseb-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mipseb-linux.s) > avcall-mipseb-macro.S

avcall-mipsel-linux.s : avcall-mips.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=32 -mel $(GCCFLAGS) -D__mips__ -S avcall-mips.c -o avcall-mipsel-linux.s

avcall-mipsel-macro.S : avcall-mipsel-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mipsel-linux.s) > avcall-mipsel-macro.S

avcall-mipsn32eb-linux.s : avcall-mipsn32.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=n32 -meb $(GCCFLAGS) -D__mipsn32__ -S avcall-mipsn32.c -o avcall-mipsn32eb-linux.s

avcall-mipsn32eb-macro.S : avcall-mipsn32eb-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mipsn32eb-linux.s) > avcall-mipsn32eb-macro.S

avcall-mipsn32el-linux.s : avcall-mipsn32.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=n32 -mel $(GCCFLAGS) -D__mipsn32__ -S avcall-mipsn32.c -o avcall-mipsn32el-linux.s

avcall-mipsn32el-macro.S : avcall-mipsn32el-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mipsn32el-linux.s) > avcall-mipsn32el-macro.S

avcall-mips64eb-linux.s : avcall-mips64.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=64 -meb $(GCCFLAGS) -D__mips64__ -S avcall-mips64.c -o avcall-mips64eb-linux.s

avcall-mips64eb-macro.S : avcall-mips64eb-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mips64eb-linux.s) > avcall-mips64eb-macro.S

avcall-mips64el-linux.s : avcall-mips64.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) mips64-linux gcc -V 4.0.2 -mabi=64 -mel $(GCCFLAGS) -D__mips64__ -S avcall-mips64.c -o avcall-mips64el-linux.s

avcall-mips64el-macro.S : avcall-mips64el-linux.s ../common/asm-mips.sh $(THISFILE)
	(echo '#include "asm-mips.h"' ; ../common/asm-mips.sh < avcall-mips64el-linux.s) > avcall-mips64el-macro.S


avcall-sparc-linux.s : avcall-sparc.c avcall.h.in $(THISFILE)
	$(CROSS_TOOL) sparc-linux gcc -V 3.1 $(GCCFLAGS) -D__sparc__ -S avcall-sparc.c -o avcall-sparc-linux.s

avcall-sparc-macro.S : avcall-sparc-linux.s ../common/asm-sparc.sh $(THISFILE)
	(echo '#include "asm-sparc.h"' ; ../common/asm-sparc.sh < avcall-sparc-linux.s) > avcall-sparc-macro.S

avcall-sparc64-linux.s : avcall-sparc64.c avcall.h.in $(THISFILE)
# This compiler produces useless instructions with -fPIC. The result is PIC even without -fPIC.
	$(CROSS_TOOL) sparc64-linux gcc -V 4.0.2 $(GCCFLAGS) -fno-PIC -D__sparc64__ -S avcall-sparc64.c -o avcall-sparc64-linux.s

avcall-sparc64-macro.S : avcall-sparc64-linux.s ../common/asm-sparc.sh $(THISFILE)
	(echo '#include "asm-sparc.h"' ; ../common/asm-sparc.sh < avcall-sparc64-linux.s) > avcall-sparc64-macro.S


# Patrick Bridges says that on Linux/Alpha, avcall-alpha.s compiled with "-O"
# works but compiled with "-O2" doesn't work.
avcall-alpha.s : avcall-alpha.c avcall.h.in $(THISFILE)
	$(GCC) -V 2.7.2 -b alpha-dec-osf $(GCCFLAGS) -O1 -D__alpha__ -S avcall-alpha.c -o avcall-alpha-temp.s
	$(SED) -e '/ldgp/d' < avcall-alpha-temp.s > avcall-alpha.s
	$(RM) avcall-alpha-temp.s

avcall-hppa.s : avcall-hppa.c avcall.h.in $(THISFILE)
	$(GCC) -V 2.6.3 -b hppa1.0-hpux $(GCCFLAGS) -D__hppa__ -S avcall-hppa.c -o avcall-hppa-temp.s
	$(SED) -e 's/120/1060/g' < avcall-hppa-temp.s > avcall-hppa.s
	$(RM) avcall-hppa-temp.s

avcall-arm-macro.S : avcall-arm.c avcall.h.in ../common/asm-arm.sh $(THISFILE)
	$(GCC) -V 2.6.3 -b arm-acorn-riscix $(GCCFLAGS) -D__arm__ -S avcall-arm.c -o avcall-arm.s
	(echo '#include "asm-arm.h"' ; ../common/asm-arm.sh < avcall-arm.s) > avcall-arm-macro.S
	$(RM) avcall-arm.s

avcall-armel.s : avcall-armel.c avcall.h.in $(THISFILE)
	$(GCC) $(GCCFLAGS) -D__arm__ -S avcall-armel.c -o avcall-armel.s

avcall-powerpc-aix.s : avcall-powerpc.c avcall.h.in $(THISFILE)
	$(GCC) -V 2.95.2 -b rs6000 -mno-power -mno-power2 -mno-powerpc -mnew-mnemonics $(GCCFLAGS) -D__powerpc__ -S avcall-powerpc.c -o avcall-powerpc-aix.s

avcall-powerpc-sysv4.s : avcall-powerpc.c avcall.h.in $(THISFILE)
	$(GCC) -V 2.95.2 -b ppc-linux -mno-power -mno-power2 -mno-powerpc $(GCCFLAGS) -D__powerpc__ -S avcall-powerpc.c -o avcall-powerpc-sysv4.s

avcall-powerpc-macos.s : avcall-powerpc.c avcall.h.in $(THISFILE)
	$(GCC) -V 3.3.2 -b powerpc-darwin $(GCCFLAGS) -D__powerpc__ -S avcall-powerpc.c -o avcall-powerpc-macos.s

avcall-powerpc64.s : avcall-powerpc64.c avcall.h.in $(THISFILE)
	/cross/powerpc64-linux-tools/bin/powerpc64-linux-gcc $(GCCFLAGS) -D__powerpc64__ -S avcall-powerpc64.c -o avcall-powerpc64.s

avcall-ia64.s : avcall-ia64.c avcall.h.in $(THISFILE)
	$(GCC) -V 2.9-ia64-000216 -b ia64-hp-linux $(GCCFLAGS) -D__ia64__ -S avcall-ia64.c -o avcall-ia64.s

avcall-x86_64-linux.s : avcall-x86_64.c avcall.h.in $(THISFILE)
	$(GCC) -V 3.2.2 -b x86_64-suse-linux $(GCCFLAGS) -D__x86_64__ -S avcall-x86_64.c -o avcall-x86_64-linux.s

avcall-x86_64-macro.S : avcall-x86_64-linux.s ../common/asm-x86_64.sh $(THISFILE)
	(echo '#include "asm-x86_64.h"' ; ../common/asm-x86_64.sh < avcall-x86_64-linux.s) > avcall-x86_64-macro.S

# --------------- Rules for debugging test failures ---------------

tests : tests-i386.s tests-m68k.s tests-mips.s tests-sparc.s tests-alpha.s tests-hppa.s tests-arm.s tests-powerpc.s tests-ia64.s tests-x86_64.s
	true

tests-i386.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.7.2 -b i486-linuxaout $(GCCFLAGS) -I/usr/include -D__i386__ -S tests.c -o tests-i386.s
	$(RM) avcall.h

tests-m68k.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.95.2 -b m68k-sun $(GCCFLAGS) -I/usr/include -D__m68k__ -S tests.c -o tests-m68k.s
	$(RM) avcall.h

tests-mips.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.95.2 -b mips-sgi $(GCCFLAGS) -I/usr/include -D__mips__ -S tests.c -o tests-mips.s
	$(RM) avcall.h

tests-sparc.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.95.2 -b sparc-sun $(GCCFLAGS) -I/usr/include -D__sparc__ -S tests.c -o tests-sparc.s
	$(RM) avcall.h

tests-alpha.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.7.2 -b alpha-dec-osf $(GCCFLAGS) -I/usr/include -D__alpha__ -S tests.c -o tests-alpha.s
	$(RM) avcall.h

tests-hppa.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.6.3 -b hppa1.0-hpux $(GCCFLAGS) -I/usr/include -D__hppa__ -S tests.c -o tests-hppa.s
	$(RM) avcall.h

tests-arm.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.6.3 -b arm-acorn-riscix $(GCCFLAGS) -I/usr/include -D__arm__ -S tests.c -o tests-arm.s
	$(RM) avcall.h

tests-powerpc.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.95.2 -b rs6000 $(GCCFLAGS) -I/usr/include -D__powerpc__ -S tests.c -o tests-powerpc.s
	$(RM) avcall.h

tests-ia64.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 2.9-ia64-000216 -b ia64-hp-linux $(GCCFLAGS) -I/usr/include -D__ia64__ -S tests.c -o tests-ia64.s
	$(RM) avcall.h

tests-x86_64.s : tests.c avcall.h.in
	$(LN) avcall.h.in avcall.h
	$(GCC) -V 3.2.2 -b x86_64-suse-linux $(GCCFLAGS) -I/usr/include -D__x86_64__ -S tests.c -o tests-x86_64.s
	$(RM) avcall.h
